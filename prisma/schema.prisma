generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  services      Service[]
  professionals Professional[]
  bookings      Booking[]
  apiKeys       ApiKey[]

  @@map("organizations")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String
  role           String   @default("member") // owner, admin, member
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("users")
}

model Service {
  id             String   @id @default(cuid())
  name           String
  description    String?
  duration       Int      // duration in minutes
  price          Float
  active         Boolean  @default(true)
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization  Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  professionals ServiceProfessional[]
  bookings      Booking[]

  @@index([organizationId])
  @@map("services")
}

model Professional {
  id             String   @id @default(cuid())
  name           String
  email          String?
  phone          String?
  active         Boolean  @default(true)
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization  Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  services      ServiceProfessional[]
  bookings      Booking[]
  scheduleRules ScheduleRule[]
  blocks        Block[]

  @@index([organizationId])
  @@map("professionals")
}

model ServiceProfessional {
  id             String   @id @default(cuid())
  serviceId      String
  professionalId String
  createdAt      DateTime @default(now())

  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@unique([serviceId, professionalId])
  @@map("service_professionals")
}

model Booking {
  id             String   @id @default(cuid())
  serviceId      String
  professionalId String
  organizationId String
  clientName     String
  clientEmail    String?
  clientPhone    String?
  startTime      DateTime
  endTime        DateTime
  status         String   @default("confirmed") // confirmed, cancelled
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id])
  professional Professional @relation(fields: [professionalId], references: [id])

  @@index([organizationId])
  @@index([startTime])
  @@map("bookings")
}

model ScheduleRule {
  id             String   @id @default(cuid())
  professionalId String
  dayOfWeek      Int      // 0 = Sunday, 6 = Saturday
  startTime      String   // HH:mm format
  endTime        String   // HH:mm format
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("schedule_rules")
}

model Block {
  id             String   @id @default(cuid())
  professionalId String
  startTime      DateTime
  endTime        DateTime
  reason         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("blocks")
}

model ApiKey {
  id             String   @id @default(cuid())
  name           String
  key            String   @unique
  organizationId String
  active         Boolean  @default(true)
  lastUsedAt     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("api_keys")
}
